#!/usr/bin/env perl -CADS
#
# ytgloss: run a text file through MeCab/Unidic, with optional
# user dictionary, and markup all identified words and phrases
# with pronunciations and English definitions.
#

require 5.10.1;
use warnings;
use strict;
use utf8;
use FindBin qw($Bin);
use lib $Bin;
use Yomitori;
use Encode;
use Text::MeCab;
use DBI;
use Getopt::Long qw(:config no_ignore_case bundling);
use File::Temp qw(mktemp);
use sigtrap qw(handler cleanup normal-signals);

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Useqq = 1;
#$Data::Dumper::Terse = 1;
{ no warnings 'redefine';
    sub Data::Dumper::qquote {
        my $s = shift;
        return "'$s'";
    }
}

my %seen;
my $vocabid = 0;

readconfig();

my $DB = "$YT{basedir}/lib/dict.sqlite3";

my $DICT_INDEX = "$YT{dict_index} -d $YT{unidic} -f utf8 -t utf8";
my @fixparse = map($YT{libdir} . "/$_",split(/,/,$YT{fixparse}||""));
my @fixgloss = map($YT{libdir} . "/$_",split(/,/,$YT{fixgloss}||""));


my %INFO = (
	title => "",
	author => "",
	year => "",
	series => "",
	_done => 0,
);

GetOptions(
	"fixparse|f=s" => \@fixparse,
	"fixgloss|g=s" => \@fixgloss,
	"title|t=s" => \$INFO{title},
	"author|a=s" => \$INFO{author},
) or die <<EOF;
usage: $0 [options] [text ...]
    --fixparse: file with parsing overrides for MeCab; can contain
        a mix of whitespace-separated (kanji,reading) lines or CSV
        lines in mecab-dict-index format (the only way to really
        override verbs and adjectives)
	--fixgloss: file with whitespace-separated meaning overrides
        for specific (kanji,reading) pairs or non-kanji words.
    --title: string to set as the book title in the PDF metadata
    --author: string to set as the book author in the PDF metadata
        title and author can also be embedded in a leading comment
        block in the text, like so:
        #Yomitori-1.0
        # title Ame No Naka Ni Shinu
        # author Nishimura Kyoutarou
EOF

my %fixgloss;
if (@fixgloss) {
	foreach my $file (@fixgloss) {
		if (!open(In,$file)) {
			warn "$0: $file: $!\n";
			next;
		}
		while (<In>) {
			next if /^\s*$|^\s*#/;
			chomp;
			my ($word,$reading,$gloss) = split(/\s+/,$_,3);
			if (allkana($word)) {
				$gloss = "$reading $gloss";
				$reading = $word;
			}
			$fixgloss{$word,$reading} = $gloss;
		}
		close(In);
	}
}

my $fixparse;
if (@fixparse) {
	my $src = mktemp("$YT{tmpdir}/ytglosssrcXXXXX");
	$fixparse = mktemp("$YT{tmpdir}/ytglossdicXXXXX");
	open(Out,">$src") or die "$0: $fixparse: $!\n";
	foreach my $file (@fixparse) {
		if (!open(In,$file)) {
			warn "$0: $file: $!\n";
			next;
		}
		while (<In>) {
			next if /^\s*$|^\s*#/;
			chomp;
			if (/^[^\d]+,\d/) {
				#CSV line to be copied verbatim
				print Out "$_\n";
				next;
			}
			my ($word,$reading) = split(/\s+/);
			$reading = $word unless $reading;
			$reading = hira2kata($reading);
			# crude hack to treat user-supplied words as low-cost
			# names; unidic-specific
			print Out "$word,0,0,100,名詞,普通名詞,一般,姓,*,*,",
				"$reading,$reading,$word,$reading,$word,$reading,和,*,*,*,*\n";
		}
	}
	close(Out);
	if (-s $src) {
		system("$DICT_INDEX -u $fixparse $src > /dev/null 2>&1");
	}else{
		unlink($fixparse);
		$fixparse = "";
	}
	unlink($src);
}

my @MCOPTS = (dicdir => $YT{unidic});
push(@MCOPTS,userdic => $fixparse) if $fixparse;
my $MC = Text::MeCab->new(@MCOPTS);

my $dbh = DBI->connect("dbi:SQLite:dbname=$DB","","",
	{ sqlite_unicode => 1 ,AutoCommit => 0 });
my $krlookup = $dbh->prepare(q{
	select kanji,reading,gloss from dict
	where type = ? and kanji = ? and reading = ?
});
my $klookup = $dbh->prepare(q{
	select kanji,reading,gloss from dict where type = ? and kanji = ?
});
my $rlookup = $dbh->prepare(q{
	select kanji,reading,gloss from dict where type = ? and reading = ?
});

while (<>) {
	if (/^$/) {
		print;
		next;
	}
	chomp;	
	if ($. == 1 and /^#Yomitori-1/) {
		# scan for file metadata lines
		while (<>) {
			last unless /^#/;
			my ($k,$v) = /^#\s*(\S+)\s+(.*)$/;
			# command-line title/author win!
			$INFO{$k} = $v if $v and ! $INFO{$k};
		}
	}
	if (! $INFO{_done}) {
		printheader();
		$INFO{_done} = 1;
	}
	foreach my $clause (getclauses(getmorphemes($_))) {
		if ($clause->{_filler}) {
			print $clause->{sf};
			next;
		}
		my @m = @{$clause->{m}};
		while (@m > 0) {
			my ($sf,$sr,$df,$dr,$gloss,$sdf);

			#some particles are unlikely starters, like "no" and "ha".
			if ($m[0]->{p1} eq "助詞"
				and grep ($m[0]->{sf} eq $_,qw(の は))) {
				print $m[0]->{sf};
				shift(@m);
				next;
			}elsif ($m[0]->{p1} eq "助動詞") {
				print $m[0]->{sf};
				shift(@m);
				next;
			}

			foreach my $n (reverse(0..$#m)) {
				# compute the composite surface/reading;
				# if the reading and dictreading differ,
				# compute a separate dictform/dictreading
				# that should be looked up first.
				# 
				$sf = join("",map($_->{sf},@m[0..$n]));
				$sr = join("",map($_->{sr},@m[0..$n]));
				($df,$dr,$sdf) = ($sf,$sr,"");
				# TODO: only do this for verbs and adjectives
				if ($m[$n]->{sr} ne $m[$n]->{dr}) {
					$df = join("",map($_->{sf},@m[0..($n-1)]),
						$m[$n]->{sdf} || $m[$n]->{df});
					$dr = join("",map($_->{sr},@m[0..($n-1)]),
						$m[$n]->{dr});					
				}
				if ($n == 0) {
					$df = $m[0]->{df};
					$dr = $m[0]->{dr};
					$sdf = $m[0]->{sdf};
				}

				# do exact matches on the user dictionary
				if ($fixgloss{$df,$dr}) {
					$gloss = $fixgloss{$df,$dr};
					splice(@m,0,$n+1);
					last;
				}elsif ($fixgloss{$sf,$sr}) {
					$gloss = $fixgloss{$sf,$sr};
					splice(@m,0,$n+1);
					last;
				}elsif ($n == 0 and $sdf
					and $fixgloss{$sdf,$dr}) {
					$gloss = $fixgloss{$sdf,$dr};
					shift(@m);
					last;
				}
				my ($k,$r,$g);
				#JMdict first

				# first try for an exact match on (sdf,dr)
				if ($sdf) {
					$krlookup->execute(0,$sdf,$dr);
					($k,$r,$g) = $krlookup->fetchrow_array;
					if (defined $g) {
						if ($n == 0 and allkana($sf)) {
							# don't convert non-kanji uses to kanji
							$df = $dr;
						}
						$gloss = $g;
						splice(@m,0,$n+1);
						last;
					}
				}

				# next try for an exact match on (df,dr)
				$krlookup->execute(0,$df,$dr);
				($k,$r,$g) = $krlookup->fetchrow_array;
				if (defined $g) {
					if ($n == 0 and allkana($sf)) {
						# don't convert non-kanji uses to kanji
						$df = $dr;
					}
					$gloss = $g;
					splice(@m,0,$n+1);
					last;
				}

				# match (sf,sr) - usually same as previous if doesn't
				# end in a conjugated verb or adjective or include an
				# honorific o/go as hiragana
				$krlookup->execute(0,$sf,$sr);
				($k,$r,$g) = $krlookup->fetchrow_array;
				if (defined $g) {
					$gloss = $g;
					splice(@m,0,$n+1);
					# don't print the dictform, since that's not what
					# we found
					$dr = $sr;
					$df = $sf;
					last;
				}

				# katakana words (sf)
				if ($sf =~ /^\p{InKataKana}+$/) {
					$rlookup->execute(0,$sf);
					($k,$r,$g) = $rlookup->fetchrow_array;
					if (defined $g) {
						$gloss = $g;
						splice(@m,0,$n+1);
						last;
					}
				}

				# before we start ignoring kanji, see if the last
				# two morphemes are a verb and an auxiliary verb.
				next if $n > 0 and $m[$n-1]->{p1} eq "動詞"
					and $m[$n]->{p1} eq "助動詞";

				# and while we're at it, at least some trailing
				# particles should be nuked.
				next if $m[$n]->{sf} eq "の" and $m[$n]->{p1} eq "助詞";

				# don't lookup verbs not in dict form followed by a
				# particle (example false positive: あげて)
				next if $n == 1 and $m[0]->{p1} eq "動詞"
					and $m[1]->{p1} eq "助詞"
					and $m[0]->{sr} ne $m[0]->{dr};

				# match on just dr, in case the kanji usage is inconsistent.
				$rlookup->execute(0,$dr);
				while (($k,$r,$g) = $rlookup->fetchrow_array) {
					# only use lookups that parse the same
					last if matchmecab($k,$r,@m[0..$n]);
				}
				if (defined $g) {
					$gloss = $g;
					splice(@m,0,$n+1);
					last;
				}

				# non-kanji words ("",dr)
				$krlookup->execute(0,"",$dr);
				while (($k,$r,$g) = $krlookup->fetchrow_array) {
					# only use lookups that parse the same
					last if matchmecab($k,$r,@m[0..$n]);
				}
				if (defined $g) {
					$gloss = $g;
					splice(@m,0,$n+1);
					last;
				}

				# non-kanji words ("",sr)
				$krlookup->execute(0,"",$sr);
				while (($k,$r,$g) = $krlookup->fetchrow_array) {
					# only use lookups that parse the same
					last if matchmecab($k,$r,@m[0..$n]);
				}
				if (defined $g) {
					$gloss = $g;
					splice(@m,0,$n+1);
					last;
				}

				# hiragana words that might have kanji in dictionary (sf)
				if (allkana($sf)) {
					$rlookup->execute(0,$sf);
					while (($k,$r,$g) = $rlookup->fetchrow_array) {
						# only use lookups that parse the same
						last if matchmecab($k,$r,@m[0..$n]);
					}
					if (defined $g) {
						$gloss = $g;
						splice(@m,0,$n+1);
						last;
					}
				}

				# try exact match in namedict
				$krlookup->execute(1,$sf,$sr);
				($k,$r,$g) = $krlookup->fetchrow_array;
				if (defined $g) {
					$gloss = $g;
					splice(@m,0,$n+1);
					# don't print the dictform, since that's not what
					# we found
					$dr = $sr;
					$df = $sf;
					last;
				}

				# try katakana match in namedict
				if ($sf =~ /^\p{InKataKana}+$/) {
					$rlookup->execute(1,$sf);
					($k,$r,$g) = $rlookup->fetchrow_array;
					if (defined $g) {
						$gloss = $g;
						splice(@m,0,$n+1);
						last;
					}
				}

				# give up trying
				if ($n == 0) {
					if (allkana($sf)) {
						print $sf;
					}elsif ($sf) {
						printglossword($sf,$sr,"XunknownX",
							$sdf ? $sdf : $df,$dr);
					}
					shift(@m);
					last;
				}
			}
			if ($gloss) {
				if ($sdf) {
					printglossword($sf,$sr,$gloss,$sdf,$dr);
				}else{
					printglossword($sf,$sr,$gloss,$df,$dr);
				}
			}
		}
	}
	print "\n";
}
$krlookup->finish;
$klookup->finish;
$rlookup->finish;
$dbh->disconnect;
exit(0);

sub printglossword {
	my ($surface,$surfacereading,$gloss,$dictform,$dictreading) = @_;
	my $word = $dictform ? $dictform : $surface;
	my $reading = $dictreading ? $dictreading : $surfacereading;
	if (my $id = $seen{$word,$reading,$gloss}) {
		print makemeta({
			word => $surface,
			reading => $surfacereading,
			id => $id,
		});
	}elsif ($word =~ /^\p{InKana}+$/) {
		my $id = ++$vocabid;
		$seen{$word,$reading,$gloss} = $id;
		my $meta = {
			word => $surface,
			reading => "",
			id => $id,
			gloss => $gloss,
		};
		if ($dictreading and $dictreading ne $surfacereading) {
			$meta->{dictreading} = $dictreading;
			$meta->{dictform} = $dictform;
		}
		print makemeta($meta);
	}else{
		my $id = ++$vocabid;
		$seen{$word,$reading,$gloss} = $id;
		my $meta = {
			word => $surface,
			reading => $surfacereading,
			id => $id,
			gloss => $gloss,
		};
		if ($dictreading and $dictreading ne $surfacereading) {
			$meta->{dictreading} = $dictreading;
			$meta->{dictform} = $dictform;
		}
		print makemeta($meta);
	}
}

sub getmorphemes {
	my ($line) = @_;
	$line =~ tr/ /–/; # spaces get lost in parsing; this is a UTF8 en-dash
	my @morpheme;
	for (my $node = $MC->parse($line); $node; $node = $node->next) {
		my $surface = decode_utf8($node->surface);
		$surface = "" unless defined($surface);
		$surface =~ tr/–/ /;
		my $feature = decode_utf8($node->feature) || "";
		$feature =~ tr/*//d;
		my @feature = split(",",$feature);
		foreach (0..17) {
			$feature[$_] = "" unless defined $feature[$_];
		}
		my ($pos1,$pos2,$ctype,$cform,$dictreading,
			$dictform,$origin,$reading,$pron) = @feature[0,1,4,5,6,7,12,17,9];
		$dictform =~ s/-.*$//;

		# wtf, unidic? kanji proper names get katakana dictforms?
		# (cf. "高橋")
		#
		$dictform = $surface if !allkana($surface) and allkana($dictform);

		#field 17 isn't always filled in, so fall back to 9, which
		#might have "ー" in it; instead of guessing the correct vowel,
		#we'll just steal the matching one from dictreading, except
		#at the end of a verb morpheme ("キー", etc; TODO)
		#
		$reading = $pron unless $reading;
		if ($reading =~ /ー/) {
			foreach my $i (0..(length($reading)-2)) {
				if (substr($reading,$i,1) eq "ー") {
					substr($reading,$i,1) = substr($dictreading,$i,1);
				}
			}
			substr($reading,-1,1) = substr($dictreading,-1,1)
				if substr($reading,-1,1) eq "ー" and $pos1 ne "動詞";
		}

		my $sdf = "";
		if (grep($pos1 eq $_,qw(動詞 形容詞))) {
			$sdf = deflect($pos1,$surface,$reading,$dictform,$dictreading);
		}

		# Sometimes hiragana small-tsu becomes a standalone morpheme
		# with no reading.
		if ($origin eq "記号" and $surface eq "っ") {
			$origin = "";
			$reading = $surface;
			$dictform = $surface;
			$dictreading = $surface;
		}

		# if there's kanji in dictreading, mecab has punted, and
		# found no valid reading; flag these for manual fixing
		if ($dictreading !~ /^\p{InKana}+$/) {
			$dictreading = "XnoparseX=$dictreading";
			$reading = "XnoparseX=$reading";
		}
		push(@morpheme,{
			sf => $surface,
			sr => ($reading ? kata2hira($reading) : ""),
			sdf => $sdf,
			df => $dictform,
			dr => ($dictreading ? kata2hira($dictreading) : ""),
			p1 => $pos1,
			p2 => $pos2,
			ct => $ctype,
			cf => $cform,
			or => $origin,
		});
	}
	return @morpheme;
}

sub getclauses {
	my @clause;
	my $current = {_filler => 1, sf => "", sr => "", m => []};
	foreach (@_) {
		# TODO: allow "、" in non-filler clause, for AsoIku on-mim and
		# other edge cases
		next if $_->{p1} eq "BOS/EOS";
		if ($_->{or} eq "記号"
			or $_->{sf} =~ /^[\p{PosixPrint}\p{InFWAN}]+$/
			or $_->{p2} eq "数詞") {
			if (! $current->{_filler}) {
				push(@clause,$current);
				$current = {_filler => 1, sf => "", sr => "", m => []};
			}
			push(@{$current->{m}},$_);
			$current->{sf} .= $_->{sf};
			$current->{sr} .= $_->{sr};
		}else{
			if ($current->{_filler}) {
				push(@clause,$current);
				$current = {_filler => 0, sf => "", sr => "", m => []};
			}
			$current->{sf} .= $_->{sf};
			$current->{sr} .= $_->{sr};
			push(@{$current->{m}},$_);
		}
	}
	push(@clause,$current);
	return @clause;
}

# loose dictionary lookups should be passed through mecab to see
# if they parse into the same sort of morphemes
#
sub matchmecab {
	my ($returnedk,$returnedr,@m1) = @_;
	if ($returnedk) {
		my @m2 = getmorphemes($returnedk);
		pop(@m2);
		return 0 if @m1 != @m2;
		foreach my $i (0..$#m1) {
			return 0 if $m1[$i]->{p1} ne $m2[$i]->{p1};
		}
	}else{
		my @m2 = getmorphemes($returnedr);
		pop(@m2);
		return 0 if @m1 != @m2;
		foreach my $i (0..$#m1) {
			return 0 if $m1[$i]->{p1} ne $m2[$i]->{p1};
		}
	}
	return 1;
}

sub printheader {
	print "#Yomitori-1.0\n";
	foreach (sort keys %INFO) {
		next if /^_/;
		print join(" ","#",$_,$INFO{$_}),"\n" if $INFO{$_};
	}
	print "#\n";	
}

END {
	unlink($fixparse) if $fixparse;
}
sub cleanup {
	exit;
}
