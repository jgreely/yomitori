#!/usr/bin/env perl -CADS
#
# ytmakedict: utility to create SQLite dictionary from JMdict JMnedict.
# takes about 15 minutes to run on my laptop

require 5.10.1;
use warnings;
use strict;
use XML::Twig;
use DBI;
use FindBin qw($Bin);
use lib $Bin;
use Yomitori;
use Getopt::Long qw(:config no_ignore_case bundling);

readconfig();

my $SRCDIR = "$YT{basedir}/dictdata";
my %SRC = ("JMdict" => "word", "JMnedict.xml" => "name");
my $DB = "$YT{libdir}/dict.sqlite3";

#hash for mapping entity values back into their names
my %E = ();

my @arrays = qw(k_ele ke_pri ke_inf r_ele re_pri re_inf re_restr
	sense pos field misc dial gloss ant s_inf xref stagk stagr lsource
	audit bibl etym links example pri trans name_type trans_det);

my $count;
my $etype;

unlink($DB);
my $dbh = DBI->connect("dbi:SQLite:dbname=$DB","","",
	{ sqlite_unicode => 1 ,AutoCommit => 0 });
create_db($dbh);

my $dict_sth = $dbh->prepare(q(
	insert into dict (type,kanji,reading,gloss) values (?,?,?,?)
));

foreach my $SRC (sort keys %SRC) {
	my $twig = new XML::Twig(
		start_tag_handlers => { entry => \&dump_entities },
		twig_handlers => {
			ke_inf => \&unent,
			re_inf => \&unent,
			pos => \&unent,
			field => \&unent,
			misc => \&unent,
			dial => \&unent,
			name_type => \&unent,
			entry => \&parse_entry ,
			# hack to give this field a non-undef value
			re_nokanji => sub { $_->set_text(1) },
		});
	$count = 0;
	print "Importing $SRC\n";
	$etype = $SRC{$SRC};
	$twig->parsefile("$SRCDIR/$SRC");
	$dbh->commit;
}

# import just the readings from kanjidic2
#
my $kanji_sth = $dbh->prepare(q(
	insert into kanji (char,reading) values (?,?)
));

# why all the handlers? Simplifying the XML dramatically
# simplifies the resulting Perl data structure
#
my $twig = new XML::Twig(
	twig_handlers => {
		dic_ref => \&kdic_simple_dic_ref,
		cp_value => \&kdic_simple_cp_value,
		rad_value => \&kdic_simple_rad_value,
		q_code => \&kdic_simple_q_code,
		character => \&parse_kdic,
		reading => \&kdic_ignore_reading,
		meaning => \&kdic_ignore_meaning,
		rmgroup => \&kdic_simple_rmgroup,
		reading_meaning => \&kdic_eliminate_rmgroup,
		misc => \&kdic_eliminate_misc,
		dic_number => sub {$_->set_tag('xref')},
		stroke_count => sub {$_->set_tag('stroke')},
		query_code => sub {$_->set_tag('query')},
	}
);
$count = 0;
print "Importing kanjidic2.xml\n";
$twig->parsefile("$SRCDIR/kanjidic2.xml");

create_indexes($dbh);
close(STDERR); #sqlite/perl bug
$dbh->disconnect;
exit 0;

#sigh; I can't seem to get it to not expand entities. I
#want to store the entity-coded version in the database,
#but it looks like the only way to do that is to dump the
#entity table into a hash and undo the substitution,
#working under the assumption that they're only used as
#the complete value of <pos>, <field>, and <dial>
#
sub dump_entities {
	my ($twig,$element) = @_;

	foreach my $entity ($twig->entity_names) {
		$E{$twig->entity($entity)->val} = $entity;
	}
	#only run once, then delete the handler
	$twig->setStartTagHandler("entry");
}

sub parse_entry {
	my ($twig,$element) = @_;
	$count++;

	my $ref = $element->simplify(forcearray=>\@arrays);
	# strip out redundant xml:lang attributes
	if (defined $ref->{sense}) {
		# jmdict schema
		foreach my $sense (@{$ref->{sense}}) {
			foreach my $field (qw(gloss lsource)) {
				if (ref $sense->{$field}) {
					foreach my $el (@{$sense->{$field}}) {
						delete $el->{'xml:lang'} if $el->{'xml:lang'} eq 'eng';
					}
				}
			}
		}
#TODO: pull this giant mess out into a separate function that
#returns an array of split records that you can just loop over
#to insert.
		# now that the entry is in canonical form, break it into
		# individual kanji/kana/sense combinations based on
		# re_nokanji, re_restr, stagk, and stagr
		#
		my @K;
		@K = map($_->{keb},@{$ref->{k_ele}}) if ref($ref->{k_ele});
		my @NKR;
		@NKR = @{$ref->{r_ele}} unless @K;
		foreach my $k (@K) {
			my @ktags;
			foreach my $r (@{$ref->{r_ele}}) {
				if ($r->{re_nokanji}) {
					push(@NKR,$r) unless $r->{nkr}++;
					next;
				}
				next if ref($r->{re_restr}) &&
					!grep($k eq $_,@{$r->{re_restr}});
				my @pos;
				my @S;
				foreach my $s (@{$ref->{sense}}) {
					my @tags;
					if (ref($s->{misc})) {
						push(@tags,@{$s->{misc}});
					}
					if (ref($s->{pos})) {
						@pos = @{$s->{pos}};
					}
					next if ref($s->{stagk}) &&
						!grep($k eq $_,@{$s->{stagk}});
					next if ref($s->{stagr}) &&
						!grep($r->{reb} eq $_,@{$s->{stagr}});
					my @gloss;
					foreach my $g (@{$s->{gloss}}) {
						next if $g->{'xml:lang'};
						push(@gloss,$g->{content})
					}
					next unless @gloss;
					# TODO: strip out most irrelevant tags
					my $gloss;
					if (@pos or @tags) {
						$gloss = "[";
						if (@pos) {
							$gloss .= join(",",@pos);
						}
						if (@gloss) {
							$gloss .= ";" if @pos;
							$gloss .= join(",",@tags) if @tags;
						}
						$gloss .= "] ";
					}
					$gloss .= join("; ",@gloss);
					push(@S,$gloss);
				}
				$dict_sth->execute(0,$k,$r->{reb},join(". ",@S));
			}
		}
		foreach my $r (@NKR) {
			my @pos;
			my @S;
			foreach my $s (@{$ref->{sense}}) {
				my @tags;
				if (ref($s->{misc})) {
					push(@tags,@{$s->{misc}});
				}
				if (ref($s->{pos})) {
					@pos = @{$s->{pos}};
				}
				next if ref($s->{stagr}) &&
					!grep($r->{reb} eq $_,@{$s->{stagr}});
				my @gloss;
				foreach my $g (@{$s->{gloss}}) {
					next if $g->{'xml:lang'};
					push(@gloss,$g->{content})
				}
				next unless @gloss;
				my $gloss;
				if (@pos or @tags) {
					$gloss = "[";
					$gloss .= join(",",@pos) . ";" if @pos;
					$gloss .= join(",",@tags) if @tags;
					$gloss .= "] ";
				}
				$gloss .= join("; ",@gloss);
				push(@S,$gloss);
			}
			$dict_sth->execute(0,"",$r->{reb},join(". ",@S));
		}
	}else{
		# jmnedict - no entries with multiple kebs, handful of
		# entries with multiple rebs; no entries with multiple
		# trans, a few thousand with multiple trans_det and name_type.
		#
		my ($keb,$pos,$gloss) = ("","","");
		$keb = $ref->{k_ele}->[0]->{keb}
			if defined($ref->{k_ele});
		$pos = join(",",@{$ref->{trans}->[0]->{name_type}})
			if defined $ref->{trans}->[0]->{name_type};
		$gloss = join(",",@{$ref->{trans}->[0]->{trans_det}})
			if defined $ref->{trans}->[0]->{trans_det};
		foreach my $reb (map($_->{reb},@{$ref->{r_ele}})) {
			$gloss = "[$pos] " . $gloss if $pos;
			$dict_sth->execute(1,$keb,$reb,$gloss);
		}
	}

	# reclaim the memory!
	$element->delete;
	if ($count % 10000 == 0) {
		$dbh->commit;
		print "$count\n";
	}
}

sub unent {
	my (undef,$x) = @_;
	$x->set_text($E{$x->text}) if $E{$x->text};
}

# ignore non-Japanese readings
#
sub kdic_ignore_reading {
	my ($twig,$element) = @_;
	my $lang = $element->att('r_type');
	$element->delete if $lang =~ /^(pinyin|korean_[rh])$/;
}

# ignore non-english meanings
#
sub kdic_ignore_meaning {
	my ($twig,$element) = @_;
	$element->delete if $element->att('m_lang');
}

# simplify the data structure
#
sub kdic_simple_dic_ref {
	my ($twig,$element) = @_;
	my $key = $element->att('dr_type');
	$element->del_att('dr_type');
	$element->set_name($key);
}

# simplify the data structure
#
sub kdic_simple_cp_value {
	my ($twig,$element) = @_;
	my $key = $element->att('cp_type');
	$element->del_att('cp_type');
	$element->set_name($key);
}

# simplify the data structure
#
sub kdic_simple_q_code {
	my ($twig,$element) = @_;
	# ignore all skip_misclass entries (really, who cares?)
	$element->delete if $element->att('skip_misclass');
	my $key = $element->att('qc_type');
	$element->del_att('qc_type');
	$element->set_name($key);
}

# simplify the data structure
#
sub kdic_simple_rad_value {
	my ($twig,$element) = @_;
	my $key = $element->att('rad_type');
	$element->del_att('rad_type');
	$element->set_name($key);
}

# clean up the readings section, ignoring all non-JP readings
# and splitting them into onyomi and kunyomi. Note that
# technically there can be more than one rmgroup, but no such
# records exist right now.
#
sub kdic_simple_rmgroup {
	my ($twig,$element) = @_;
	foreach my $c ($element->children('reading')) {
		if ($c->att('r_type') eq "ja_on") {
			XML::Twig::Elt->new("onyomi",$c->text)
				->paste(last_child => $element);
		}elsif ($c->att('r_type') eq "ja_kun") {
			XML::Twig::Elt->new("kunyomi",$c->text)
				->paste(last_child => $element);
		}
		$c->delete;
	}
}

# since there's almost certainly only one rmgroup, merge its
# contents up a level.
#
sub kdic_eliminate_rmgroup {
	my ($twig,$element) = @_;
	my @c = $element->children('rmgroup');
	if (@c == 1) {
		foreach my $c ($c[0]->children()) {
			$c->move(last_child => $element->parent);
		}
	}
	$element->delete;
}

# misc exists only for conceptual grouping; nuke it
#
sub kdic_eliminate_misc {
	my ($twig,$element) = @_;
	foreach my $c ($element->children()) {
		$c->move(last_child => $element->parent);
	}
	$element->delete;
}

# parse the full kanjidic2 schema, even though we're only storing
# the readings for now
#
sub parse_kdic {
	my ($twig,$element) = @_;
	$count++;

	my @force = qw(stroke meaning nanori variant four_corner onyomi kunyomi);
	my $ref = $element->simplify(forcearray => \@force,
		group_tags => { readingmeaning => 'rmgroup' });
	my $char = $ref->{literal};
	my %reading;
	if ($ref->{onyomi}) {
		foreach my $reading (@{$ref->{onyomi}}) {
			my $tmp = kata2hira($reading);
			$reading{$tmp}++;
		}
	}
	if ($ref->{kunyomi}) {
		foreach my $reading (@{$ref->{kunyomi}}) {
			my $tmp = $reading;
			$tmp =~ s/\..*$//;
			$reading{$tmp}++;
		}
	}
	foreach my $reading (keys %reading) {
		$kanji_sth->execute($char,$reading);
	}
	$element->delete;
	if ($count % 1000 == 0) {
		$dbh->commit;
		print "$count\n";
	}
}

sub create_db {
	my ($dbh) = @_;
	foreach (split(/;/,<<EOF)) {
		create table dict (
			type integer,
			kanji text,
			reading text,
			gloss text
		);
		create table kanji (
			char text,
			reading text
		)
EOF
		$dbh->do($_);
	}
	$dbh->commit;
}

sub create_indexes {
	my ($dbh) = @_;
	foreach (split(/;/,<<EOF)) {
		create index dict_t_k_r on dict(type,kanji,reading);
		create index dict_t_r on dict(type,reading);
		create index kanji_c_r on kanji(char,reading)
EOF
		$dbh->do($_);
	}
	$dbh->commit;
}
