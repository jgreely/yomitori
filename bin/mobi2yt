#!/usr/bin/env perl -CADS
#
# mobi2yt: basic AZW3 to Yomitori converter. Arguments are either
# a directory containing the structure unpacked by KindleUnpack.py
# or a list of XHTML files in the same format.

require 5.10.1;
use warnings;
use strict;
use utf8;
use FindBin qw($Bin);
use lib $Bin;
use Yomitori;
use Getopt::Long qw(:config no_ignore_case bundling);
use XML::Twig;
use DBI;

readconfig();

my $RUBYFILE;
GetOptions(
	"ruby-file|ruby|r=s" => \$RUBYFILE,
) or die "usage: $0 [--ruby-file filename] [dir|file ...]\n";

# check for standard unpacked AZW3 directory structure
if (-d "$ARGV[0]/mobi8/OEBPS/Text") {
	@ARGV = sort <$ARGV[0]/mobi8/OEBPS/Text/*.xhtml>;
}

my $DB = "$YT{basedir}/lib/dict.sqlite3";
my $dbh = DBI->connect("dbi:SQLite:dbname=$DB","","",
	{ sqlite_unicode => 1 ,AutoCommit => 0 });
my $krlookup = $dbh->prepare(q{
	select gloss from dict
	where type = ? and kanji = ? and reading = ?
});
my $kanjilookup = $dbh->prepare(q{
	select char from kanji where char = ? and reading = ?
});

my @vocab;
my %vocab;
my %normalword;
my $line = 1;
foreach my $file (@ARGV) {
	my $twig = new XML::Twig(
		twig_handlers => {
			span => \&nuke_element,
			a => \&nuke_element,
			div => \&nuke_element,
			head => \&nuke_element,
			p => \&nuke_class_and_print,
			h1 => \&nuke_class_and_print,
			h2 => \&nuke_class_and_print,
			h3 => \&nuke_class_and_print,
			ruby => \&convert_ruby,
#			img => \&print_html,
		},
	);
	$twig->parsefile($file);
	print "\n";
	$line++;
}

if ($RUBYFILE) {
	open(Out,">$RUBYFILE") or die "$0: $RUBYFILE: $!\n";
	foreach my $key (@vocab) {
		next if $normalword{$key};
		print Out "#line(s): ",$vocab{$key},"\n",$key,"\n\n";
	}
	close(Out);
}
$dbh->disconnect;
exit 0;

sub nuke_element {
	my ($twig,$element) = @_;
	$element->erase;
	return 1;
}

sub nuke_class_and_print {
	my ($twig,$element) = @_;
	$element->del_att("class");
	print $element->text,"\n";
	$line++;
	return 1;
}

#TODO: flag small images in the middle of text lines; they're likely
#replacements for non-sJIS characters (roman numerals, accented
#chracters, unusual kanji)
#
sub print_html {
	my ($twig,$element) = @_;
	$element->print;
	print "\n";
	$line++;
	return 1;
}	

sub convert_ruby {
	my ($twig,$element) = @_;
	my $base = "";
	my $ruby = "";
	foreach my $child ($element->children) {
		if ($child->gi eq "#PCDATA" or $child->gi eq "rb") {
			$base .= $child->trimmed_text;
		}elsif ($child->gi eq "rt") {
			$ruby .= $child->trimmed_text;
		}
	}
	#edge case: sometimes a picture of a non-SJIS kanji appears
	#as the base, which gets ignored.
	$base = "(empty)" if $base eq "";
	if ($RUBYFILE) {
		my $key = join(" ",$base,$ruby);
		if (!$vocab{$key}) {
			push(@vocab,$key);
			# check JMdict/JMnedict for exact kanji/reading matches
			$krlookup->execute(0,$base,$ruby);
			my @tmp = $krlookup->fetchrow_array;
			$krlookup->finish;
			if (defined($tmp[0])) {
				$normalword{$key}++;
			}else{
				$krlookup->execute(1,$base,$ruby);
				@tmp = $krlookup->fetchrow_array;
				$krlookup->finish;
				if (defined($tmp[0])) {
					$normalword{$key}++;
				}elsif (length($_[0]) == 1) {
					$kanjilookup->execute($base,$ruby);
					@tmp = $kanjilookup->fetchrow_array;
					$kanjilookup->finish;
					$normalword{$key}++ if defined $tmp[0];
				}
			}
		}
		$vocab{$key} .= " $line";
		$element->set_content($base);
	}else{
		$element->set_content(sprintf("{%s|%s}",$base,$ruby));
	}
	$element->erase;
	return 1;
}
