#!/usr/bin/env perl -CADS
#
# ytvocab: extract a vocabulary list from a glossed file
#
# TODO: add HTML/LaTeX/Word/ODT output options

require 5.10.1;
use warnings;
use strict;
use utf8;
use FindBin qw($Bin);
use lib $Bin;
use Yomitori;
use Getopt::Long qw(:config no_ignore_case bundling);

my $VERBOSE;
my $TEXFILE;
my $OUTPUT = "text";
my $OPT_L;
GetOptions(
	"verbose|v" => \$VERBOSE,
	"texfile|t=s" => \$TEXFILE,
	"output-format|output|o=s" => \$OUTPUT,
	"latex|l" => \$OPT_L,
) or die <<EOF;
usage: $0 [--verbose] [--texfile file] [--output string] [file...]
    --verbose: print complete glosses instead of trimming
    --texfile: incorporate page numbers from LaTeX aux file
    --output: generate output in latex|text (default text)
    -l: shortcut for latex output
EOF
$OUTPUT = "latex" if $OPT_L;

my %INFO = (title => "", author => "");
my %seen;
while (<>) {
	if ($. == 1 and /^#Yomitori-1/) {
		# scan for file metadata lines
		while (<>) {
			last unless /^#/;
			my ($k,$v) = /^#\s*(\S+)\s+(.*)$/;
			# command-line title/author win!
			$INFO{$k} = $v if $v and ! $INFO{$k};
		}
		$INFO{title} = "vocab" unless $INFO{title};
	}
	s/$YTREGEXP/dometa($1)/ego;
}

if ($TEXFILE) {
	my $pagecount;
	my $wordcount;
	my $curpage = 0;
	my @words;
	open(In,$TEXFILE) or die "$0: $TEXFILE: $!\n";
	printheader();
	while (<In>) {
		my ($id,$pagenum) = /^.newlabel{(id\d+)}{{\d*}{(\d+)}/;
		next unless $id;
		if ($curpage != $pagenum) {
			if ($curpage and @words) {
				my @tmp = grep($seen{$_}->{gloss} ne "",uniq(@words));
				printpagenum($curpage,scalar(@tmp));
				printwords({count=>0},@tmp);
				print "\n" if $OUTPUT eq "text";
				$pagecount++;
				$wordcount += scalar(@tmp);
			}
			@words = ();
			$curpage = $pagenum;
		}
		push(@words,$id);
	}
	close(In);
	if ($curpage and @words) {
		my @tmp = grep($seen{$_}->{gloss} ne "",uniq(@words));
		printpagenum($curpage,scalar(@tmp));
		printwords({count=>0},@tmp);
		print "\\end{description}\n" if $OUTPUT eq "latex";
		$pagecount++;
		$wordcount += scalar(@tmp);
	}
	printtrailer();
	printf STDERR ("Total words: %d, per-page: %.2f\n",
		scalar(keys %seen),$wordcount/$pagecount);
}else{
	printwords({count=>1},grep($seen{$_}->{gloss},sort keys %seen));
}
exit 0;

sub uniq {
	my %tmp;
	return grep(!$tmp{$_}++,@_);
}

sub printpagenum {
	my ($page,$count) = @_;
	if ($OUTPUT eq "text") {
		print "PAGE $page ($count)\n";
	}elsif ($OUTPUT eq "latex") {
		print "\\end{description}\n\\newpage\n" if $page > 1;
		print "{\\large Page $page ($count)}\n\\begin{description}\n";
	}else{
		die "$0: unknown output format '$OUTPUT'\n";
	}
}

sub printwords {
	my $options = shift(@_);
	foreach my $id (@_) {
		my $word = $seen{$id}->{dictform} || $seen{$id}->{word};
		my $reading = $seen{$id}->{dictreading} || $seen{$id}->{reading};
		# don't use kanji if it wasn't there originally...
		if (allkana($seen{$id}->{word}) and !allkana($word)) {
			$word = $reading;
		}
		$reading = "" if $reading and kata2hira($word) eq kata2hira($reading);
		my ($shortid) = $id =~ /^id0+(\d+)$/;
		if ($OUTPUT eq "latex") {
			print "\\item[$word";
			print " / $reading" if $reading and $word ne $reading;
			print "]\\hfill \\\\*\n{\\small ",$seen{$id}->{gloss},"}\n";
		}elsif ($OUTPUT eq "text") {
			print $id,"\t" if $VERBOSE;
			print $seen{$id}->{count},"\t" if $options->{count};
			print join("\t",$word,$reading,$seen{$id}->{gloss}),"\n";
		}else{
			die "$0: unknown output format '$OUTPUT'\n";
		}
	}
}

sub printheader {
	return unless $OUTPUT eq "latex";
	print <<'EOF';
\documentclass[oneside,openany]{ujbook}
\setlength\paperheight {115mm}
\setlength\paperwidth {90mm}
\setlength{\topmargin}{-3.25cm}
\setlength{\oddsidemargin}{-2.4cm}
\setlength{\evensidemargin}{-2.4cm}
\setlength{\textwidth}{8.5cm}
\setlength{\textheight}{10.5cm}

% hack the list environment for the small page
\renewcommand*\descriptionlabel[1]{\hspace\labelsep
    \normalfont\rmfamily #1}
\setlength\leftmargini{10pt}

%overkill, but use this to provide title/author metadata in PDF...
\usepackage[dvipdfmx,bookmarks=false]{hyperref}
\usepackage[dvipdfmx,tounicode]{pxjahyper}
\sloppy
\begin{document}
\pagestyle{empty}
EOF
	print '\hypersetup{'
		. sprintf("pdftitle={%s}",$INFO{title})
		. sprintf(",pdfauthor={%s}",$INFO{author})
		. "}\n";
}

sub printtrailer {
	return unless $OUTPUT eq "latex";
	print "\\end{document}\n";
}

sub dometa {
	my $meta = parsemeta($_[0]);
	if ($meta->{id}) {
		if (ref $seen{$meta->{id}}) {
			$seen{$meta->{id}}->{count}++;
		}else{
			substr($meta->{gloss},60) = " ..."
				if !$VERBOSE and length($meta->{gloss}) > 60;
			if ($OUTPUT eq "latex") {
				$meta->{gloss} =~ s/\^/\\textasciicircum{}/g;
				$meta->{gloss} =~ s/~/\textasciitilde{}/g;
				$meta->{gloss} =~ s/([\#\%\&\_\$])/\\$1/g;
			}
			$seen{$meta->{id}} = $meta;
			$seen{$meta->{id}}->{count} = 1;
		}
	}
	return "";
}
